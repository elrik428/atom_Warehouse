using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;  
using System.Data.SqlClient;

namespace routingrules_loadbalances
{
    public class Connection_Query
    {
        StringBuilder errorMessages = new StringBuilder();

        // Connection to DB
        public void connString(string connDatabseSrc, string connDatabsName, string query_ToRun)
         {
         SqlConnectionStringBuilder sqConString = new SqlConnectionStringBuilder();
         sqConString.DataSource = connDatabseSrc; 
         sqConString.IntegratedSecurity = true;
         sqConString.InitialCatalog = connDatabsName;
         sqConString.ConnectTimeout = 0;

         SqlConnection zacrptConn = new SqlConnection(sqConString.ConnectionString);
         try
         {
             zacrptConn.Open();
         }
         catch (SqlException ex)
         {
             for (int i = 0; i < ex.Errors.Count; i++ )
             { 
                 errorMessages.Append("Index #" + i + "\n" +
                         "Message: " + ex.Errors[i].Message + "\n" +
                         "LineNumber: " + ex.Errors[i].LineNumber + "\n" +
                         "Source: " + ex.Errors[i].Source + "\n" +
                         "Procedure: " + ex.Errors[i].Procedure + "\n");
             }
         }
              Console.WriteLine(errorMessages.ToString());
         }
         
        // Create and run SQL query
        public void sqlRuncommand(string query_ToRun)
        {
         SqlCommand sqlCommnd = new SqlCommand();
         sqlCommnd.Connection = zacrptConn;
         sqlCommnd.CommandTimeout = 0;
         sqlCommnd.CommandText = query_ToRun;
                   
          try
          {
              sqlCommnd.ExecuteNonQuery();
          }
          catch(SqlException ex)
          {
                for (int i = 0; i < ex.Errors.Count; i++ )
                {
                  errorMessages.Append("Message");
                }
           Console.WriteLine(errorMessages.ToString());
          }
        }

        // Create and run SQL query -- COUNT
        public int sqlRun_Count(string query_ToRun)
        {
            SqlCommand sqlCount = new SqlCommand();
            sqlCount.Connection = zacrptConn;
            sqlCount.CommandTimeout = 0;
            sqlCount.CommandText = query_ToRun;

            try
            {
                Int32 count = (Int32)sqlCount.ExecuteScalar();
            }
            catch (SqlException ex)
            {
                for (int i = 0; i < ex.Errors.Count; i++)
                {
                    errorMessages.Append("Message");
                }
                Console.WriteLine(errorMessages.ToString());
            }
        }
        public  SqlConnection zacrptConn { get; set; }


    
    }
    
}

